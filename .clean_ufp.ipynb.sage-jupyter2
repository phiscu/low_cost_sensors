{"attachments":{"route_adlershof.png":{"type":"sha1","value":"5fb2e247cfc2ae51ac545e62469a6db1d585805f"}},"cell_type":"markdown","id":"ff97c6","input":"# Aufbereitung der Messdaten               <img src=\"attachment:route_adlershof.png\" style=\"max-width:15%\">\n\nIn diesem Notebook bearbeiten wir die Daten unserer Ultrafeinstaubmessung so, dass wir sie mit unseren GPS-Daten verknüpfen können. Die Messdaten befinden sich noch im Rohformat, wie sie das Messgerät ausgegeben hat. Folgende Probleme sind zu beachten:\n\n- Wenn das Gerät Probleme beim Messen hat, gibt es den Wert **16777200** aus, diese Werte **müssen gelöscht werden.**\n- Immer wenn es zu ruckelig wird, geht das Gerät auf 0 Partikel runter und braucht eine Weile um wieder hochzufahren. **Diese und die ca. 6 folgenden Messwerte müssen gelöscht werden.**\n\nBitte seht euch zunächst einmal die Datei im [Ursprungsformat](https://cocalc.com/projects/72b27db5-28b4-499c-978d-9fc8476cad37/files/20180719_tour1_raw.csv?session=default) an. Beide Problemstellen seht ihr z.B. ab Zeile 1550.","pos":0,"type":"cell"}
{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":83566592},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.9"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0e923b","input":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression","pos":2,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"e6e13d","input":"path = \"20180719_tour1_raw.csv\"","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"059786","input":"data = pd.read_csv(path, sep = \",\", header = 0,  na_values=(16777200))","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"c62114","input":"print(data[1545:1568])","output":{"0":{"name":"stdout","output_type":"stream","text":"          Time  Concentration (#/cm^3)\n1545  10:58:21                  3458.0\n1546  10:58:22                  3448.0\n1547  10:58:23                  3377.0\n1548  10:58:24                     NaN\n1549  10:58:25                     NaN\n1550  10:58:26                     NaN\n1551  10:58:27                     NaN\n1552  10:58:28                     NaN\n1553  10:58:29                     NaN\n1554  10:58:30                     NaN\n1555  10:58:31                     0.0\n1556  10:58:32                     0.0\n1557  10:58:33                     0.0\n1558  10:58:34                     4.0\n1559  10:58:35                   168.0\n1560  10:58:36                   655.0\n1561  10:58:37                  1185.0\n1562  10:58:38                  1473.0\n1563  10:58:39                  1710.0\n1564  10:58:40                  1978.0\n1565  10:58:41                  2336.0\n1566  10:58:42                  2440.0\n1567  10:58:43                  2597.0\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"bee999","input":"data_c = data.copy()","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"22a3a1","input":"print(data_c.iloc[1547,0])\nprint(data_c.iloc[1547,1])","output":{"0":{"name":"stdout","output_type":"stream","text":"10:58:23\n3377.0\n"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"338da2","input":"for i in data_c.index:\n       if data_c.iloc[i,1] == 0:\n              data_c.iloc[i:i+7,1] = np.nan\n\n\nprint(data_c[1545:1568])","output":{"0":{"name":"stdout","output_type":"stream","text":"          Time  Concentration (#/cm^3)\n1545  10:58:21                  3458.0\n1546  10:58:22                  3448.0\n1547  10:58:23                  3377.0\n1548  10:58:24                     NaN\n1549  10:58:25                     NaN\n1550  10:58:26                     NaN\n1551  10:58:27                     NaN\n1552  10:58:28                     NaN\n1553  10:58:29                     NaN\n1554  10:58:30                     NaN\n1555  10:58:31                     NaN\n1556  10:58:32                     NaN\n1557  10:58:33                     NaN\n1558  10:58:34                     NaN\n1559  10:58:35                     NaN\n1560  10:58:36                     NaN\n1561  10:58:37                     NaN\n1562  10:58:38                  1473.0\n1563  10:58:39                  1710.0\n1564  10:58:40                  1978.0\n1565  10:58:41                  2336.0\n1566  10:58:42                  2440.0\n1567  10:58:43                  2597.0\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"4334df","input":"for i in reversed(data.index):\n       if data.iloc[i,1] == 0:\n              data.iloc[i:i+7,1] = np.nan\n\nprint(data[1545:1568])","output":{"0":{"name":"stdout","output_type":"stream","text":"          Time  Concentration (#/cm^3)\n1545  10:58:21                  3458.0\n1546  10:58:22                  3448.0\n1547  10:58:23                  3377.0\n1548  10:58:24                     NaN\n1549  10:58:25                     NaN\n1550  10:58:26                     NaN\n1551  10:58:27                     NaN\n1552  10:58:28                     NaN\n1553  10:58:29                     NaN\n1554  10:58:30                     NaN\n1555  10:58:31                     NaN\n1556  10:58:32                     NaN\n1557  10:58:33                     NaN\n1558  10:58:34                     NaN\n1559  10:58:35                     NaN\n1560  10:58:36                     NaN\n1561  10:58:37                     NaN\n1562  10:58:38                     NaN\n1563  10:58:39                     NaN\n1564  10:58:40                  1978.0\n1565  10:58:41                  2336.0\n1566  10:58:42                  2440.0\n1567  10:58:43                  2597.0\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"38720c","input":"data = data.dropna()\n\nprint(data[1545:1568])","output":{"0":{"name":"stdout","output_type":"stream","text":"          Time  Concentration (#/cm^3)\n1545  10:58:21                  3458.0\n1546  10:58:22                  3448.0\n1547  10:58:23                  3377.0\n1564  10:58:40                  1978.0\n1565  10:58:41                  2336.0\n1566  10:58:42                  2440.0\n1567  10:58:43                  2597.0\n1568  10:58:44                  2725.0\n1569  10:58:45                  2888.0\n1570  10:58:46                  2966.0\n1571  10:58:47                  3289.0\n1572  10:58:48                  3304.0\n1573  10:58:49                  3551.0\n1574  10:58:50                  3539.0\n1575  10:58:51                  3640.0\n1576  10:58:52                  3700.0\n1577  10:58:53                  3609.0\n1578  10:58:54                  3612.0\n1579  10:58:55                  3719.0\n1580  10:58:56                  3662.0\n1581  10:58:57                  3738.0\n1582  10:58:58                  3654.0\n1583  10:58:59                  3640.0\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"195bb9","input":"data.to_csv(\"20180719_tour1_edit.csv\", index=False)","pos":20,"type":"cell"}
{"cell_type":"markdown","id":"1a3bd8","input":"Wir schauen uns wieder exemplarisch die Zeilen ab 1550 an und sehen, dass die Fehlerwerte auf `NaN` gesetzt wurden.","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"26c53d","input":"Anschließend löschen wir alle Zeilen, die `Nan`-Werte enthalten.","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"289684","input":"Nun erstellen wir eine Schleife, die einzeln durch alle Reihen (`index`) läuft und in der zweiten Spalte nach dem Wert 0 sucht (Ausfall des Gerätes). Wo das der Fall ist, setzt die Schleife die betreffende Zeile und die nachfolgenden 6 Zeilen auf `NaN`.","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"31f1ca","input":"Wie man sehen kann, sind nach der letzten der drei aufeinanderfolgenden 0-Zeilen nur 4 Zeilen `NaN` gesetzt worden, da die letzten beiden von der Schleife schon in der ersten 0-Zeile überschrieben wurden. Um das zu verhindern, lassen wir die Schleife einfach von hinten nach vorne (`reversed) durch den Datensatz interieren, da sich die 6 Zeilen \"Sicherheitsabstand\" ja auf die Zeit nach dem Ausfall beziehen.","pos":15,"type":"cell"}
{"cell_type":"markdown","id":"39cdbe","input":"Wir importieren die CSV-Datei als Pandas-Dataframe. Dafür definieren wir den Spaltentrenner (`\",\"`), legen die erste Zeile als den Tabellenkopf (`header`) fest und übergeben direkt den Standard-Fehlerwert des Messgerätes.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"84943c","input":"Um nicht versehentlich valide Zeilen zu löschen, erstellen wir eine Kopie des Datensatzes und arbeiten damit weiter.","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"a76bfb","input":"Dann definieren wir die Datenquelle über einen Pfad, der sich in unserem Fall direkt auf die Datei im Cocalc bezieht. Solltet ihr den Code lokal auf eurem Computer ausführen, definiert ihr diesen als Text-String im Stile `\"/home/user/eure/ordner/struktur/datei.csv\"`.","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"c22dba","input":"Im ersten Schritt laden wir wie immer die benötigten Pakete:","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"c4976d","input":"Mit dem Befehl `iloc[]` können wir gezielt Zellen über ihre Position `[Zeile, Spalte]` anwählen.","pos":11,"type":"cell"}
{"cell_type":"markdown","id":"d1db55","input":"Bitte geht nun zurück in die Dateiübersicht, indem ihr oben links auf das blaue Ordnersymbol und \"Files\" klickt. Ladet euch dort den eben erstellten Datensatz für die weitere Verwendung in QGIS herunter.","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"f60f27","input":"Zuletzt speichern wir den Dataframe wieder als CSV.","pos":19,"type":"cell"}
{"id":0,"time":1591101415004,"type":"user"}
{"last_load":1591120488992,"type":"file"}